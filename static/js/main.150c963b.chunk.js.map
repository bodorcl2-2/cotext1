{"version":3,"sources":["context/SongContext.js","context/ThemeContext.js","components/NewSongform.js","components/ThemeToggle.js","components/SongList.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["SongContext","createContext","SongContextProvider","props","useState","title","id","songs","setSongs","Provider","value","addSong","uuidv1","children","ThemeContext","ThemeContextProvider","isLightTheme","light","syntax","ui","bg","dark","theme","setTheme","toggleTheme","prevState","NewSongForm","useContext","setTitle","onSubmit","e","preventDefault","htmlFor","style","color","padding","marginRight","fontSize","borderRadius","type","required","onChange","target","background","marginLeft","border","ThemeToggle","marginTop","onClick","SongList","className","map","song","key","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.150c963b.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\nimport { v1 as uuidv1 } from 'uuid'\r\nexport const SongContext = createContext();\r\n\r\nconst SongContextProvider = (props) => {\r\n\r\n    const [songs, setSongs] = useState([\r\n        { title: 'Radio', id: 1 },\r\n        { title: 'Idę prosto', id: 2 },\r\n        { title: 'Biała flaga', id: 3 },\r\n        { title: 'Ja bez kolacji nie chcę spać', id: 4 }\r\n    ]);\r\n\r\n    const addSong = (title) => {\r\n        setSongs(\r\n            [...songs, { title, id: uuidv1() }] //zamiast title: title bo wartość jest taka sama jak nazwa\r\n        )\r\n    }\r\n\r\n    return (\r\n        <SongContext.Provider value={{ songs, addSong }}>\r\n            {props.children}\r\n        </SongContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SongContextProvider;","import React, { useState, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n\r\n    const [theme, setTheme] = useState(\r\n        {\r\n            isLightTheme: false,\r\n            light: { syntax: '#555', ui: \"#ddd\", bg: '#eee' },\r\n            dark: { syntax: '#ddd', ui: \"#333\", bg: '#555' }\r\n        }\r\n    )\r\n    const toggleTheme = () => {\r\n        setTheme(prevState => {\r\n            return { ...prevState, isLightTheme: !theme.isLightTheme };\r\n        });\r\n    }\r\n    return (\r\n        <ThemeContext.Provider value={{ ...theme, toggleTheme }}>\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\nexport default ThemeContextProvider;\r\n","import React, { useState, useContext } from 'react';\r\nimport { SongContext } from '../context/SongContext';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\n\r\nconst NewSongForm = () => {\r\n    const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    const { songs, addSong } = useContext(SongContext)\r\n    const [title, setTitle] = useState('');\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        addSong(title);\r\n        setTitle('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleOnSubmit}>\r\n            <label\r\n                htmlFor=\"newSong\"\r\n                style={{\r\n                    // background: theme.ui,\r\n                    color: theme.syntax,\r\n                    padding: '.5em',\r\n                    // borderRadius: '.5em',\r\n                    marginRight: '.3em',\r\n                    fontSize: '.8em'\r\n                }}>\r\n                Tytuł utworu:\r\n                </label>\r\n            <input\r\n                style={{\r\n                    borderRadius: '.5em',\r\n                    padding: '.3em'\r\n                }}\r\n                type=\"text\"\r\n                id=\"newSong\"\r\n                value={title}\r\n                required\r\n                onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <input\r\n                type=\"submit\"\r\n                value=\"Dodaj utwór\"\r\n                style={{\r\n                    background: theme.ui,\r\n                    color: theme.syntax,\r\n                    marginLeft: \".3em\",\r\n                    padding: '.5em',\r\n                    border: 'none',\r\n                    borderRadius: '.5em'\r\n                }}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewSongForm;\r\n\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\nconst ThemeToggle = () => {\r\n    const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n    const theme = isLightTheme ? light : dark;\r\n    const { toggleTheme } = useContext(ThemeContext)\r\n    return (\r\n        <button\r\n            style={{\r\n                background: theme.ui,\r\n                color: theme.syntax,\r\n                marginTop: \"1.3em\",\r\n                padding: '.5em',\r\n                border: 'none',\r\n                borderRadius: '.5em'\r\n            }}\r\n            onClick={toggleTheme}>Przełącz tryb</button>\r\n    );\r\n}\r\n\r\nexport default ThemeToggle;","import React, { useState, useContext } from 'react';\r\nimport NewSongForm from './NewSongform';\r\nimport { ThemeContext } from '../context/ThemeContext'\r\nimport { SongContext } from '../context/SongContext'\r\nimport ThemeToggle from './ThemeToggle';\r\n\r\nconst SongList = () => {\r\n\r\n    const { isLightTheme, dark, light } = useContext(ThemeContext);\r\n    const { songs, addSong } = useContext(SongContext)\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <div className=\"song-list\" style={{ color: theme.syntax, background: theme.bg }}>\r\n            <ul>\r\n                {songs.map(song => (\r\n                    <li style={{ background: theme.ui }} key={song.id}>{song.title}</li>\r\n                ))}\r\n            </ul>\r\n            <NewSongForm />\r\n            <ThemeToggle />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default SongList;","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\nconst Navbar = () => {\r\n    const { isLightTheme, light, dark } = useContext(ThemeContext);\r\n    const theme = isLightTheme ? light : dark;\r\n\r\n    return (\r\n        <nav style={{ background: theme.ui, color: theme.syntax }}>\r\n            <h1>Context App</h1>\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>About</li>\r\n                <li>Contact</li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport SongList from './components/SongList';\r\nimport Navbar from './components/Navbar';\r\nimport ThemeContextProvider from './context/ThemeContext';\r\nimport SongContextProvider from './context/SongContext';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeContextProvider>\r\n        <SongContextProvider>\r\n          <Navbar />\r\n          <SongList />\r\n        </SongContextProvider>\r\n      </ThemeContextProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}